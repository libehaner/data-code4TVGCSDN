%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Classify Time-varying windows by HMM model
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % load data
clear; clc; close all
load('../phenotypeData/datafordeception.mat')
clear Luo Luo2 Regions i datalength ans subject_list
clear BA10 BigMotion con iq iqid inc strat rTPJ earnings
typeName = {'Incr','Cons','Strat'};
% randn('seed', 123456);  % seed for random numbersm

% % % --------------------------------------------------------------- % % %
wid = 3;
[r_value,p_value,slope_value,R_squareRobust] = fun4Observations(wid,bigdata);
disp('      done calculate obseravtions')

% % % --------------------------------------------------------------- % % %
% discard first round for stable
clear behavior
nTypes = 3;
X = [];
for subj  = 1:76
    X(1:3,:,subj) = [slope_value(2:60,subj)';r_value(2:60,subj)';...
                     p_value(2:60,subj)'];
end
data = X; 
O = 3;  %  observations (Spearman r,p, Robust Slope)
nex = 76;  % trails of 76 subjs are independent of each other
T = 59;  % discard first trail
M = 1;  % one hidden state match with one Gassian distribution
Q = nTypes;  % hidden states
% % % initial value generated by Gaussian mixture model
prior0 = normalise(rand(Q,1));
transmat0 = mk_stochastic(rand(Q,Q));
[mu0, Sigma0] = mixgauss_init(Q*M, reshape(data, [O T*nex]), 'diag');
mu0 = reshape(mu0, [O Q M]);
Sigma0 = reshape(Sigma0, [O O Q M]);
mixmat0 = [];
% % % training by EM Algorithm
[LL, prior1, transmat1, mu1, Sigma1, mixmat1] = ...
    mhmm_em(data, prior0, transmat0, mu0, Sigma0, mixmat0, 'max_iter', 100);
% % % decoding by viterbi
path = zeros(59,76);  
for subject = 1:76
    B = mixgauss_prob(data(:,:,subject), mu1, Sigma1, mixmat1);
    path(:,subject)= viterbi_path(prior1, transmat1, B);
end
clear X O nex T M Q B 
% % % --------------------------------------------------------------- % % %
[Wintypes,combTVwindow] = fun4selectWinCalculateSlopeR_Square(path,mu1,bigdata);
Wintypes{29,1}(2,:) = [];
selectWin = cell(76,4);
for i = 1:76
    for j = 1:4
        for p = 1:size(Wintypes{i,j},1)
            begin = Wintypes{i,j}(p,1);
            ends = Wintypes{i,j}(p,2);
            selectWin{i,j} =  [selectWin{i,j},begin:ends];
        end
    end
end
% save('../resultData/Win4figure','Wintypes');
% save('../resultData/selectWin4figure','selectWin');
clear selectWin
% % % --------------------------------------------------------------- % % %
% % discard subject 43,75
Wintypes_new = cell(74,4);
for i = 1:42
    for j = 1:4
    Wintypes_new{i,j} = Wintypes{i,j};
    end
end
for i = 44:74
    for j = 1:4
        Wintypes_new{i-1,j} = Wintypes{i,j};
    end
end
for j = 1:4
    Wintypes_new{74,j} = Wintypes{76,j};
end
Wintypes = Wintypes_new;
% Wintypes{54,3} = [];
% Wintypes{54,4} = [1,59]; % sub54 didn't understand the rule of the game
% Wintypes{29,1}(2,:) = [];
% Wintypes{29,1}(1,:) = [7,35];
clear Wintypes_new i j 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % save data 
selectWin = cell(74,4);
for i = 1:74
    for j = 1:4
        for p = 1:size(Wintypes{i,j},1)
            begin = Wintypes{i,j}(p,1);
            ends = Wintypes{i,j}(p,2);
            selectWin{i,j} =  [selectWin{i,j},begin:ends];
        end
    end
end
clear begin ends i j p 
% save('../resultData/selectWin','selectWin');
% save('../resultData/Wintypes','Wintypes');